--create database

--CREATE DATABASE PERSONAL_TRAINER;

--create tables

--EDUCATIONAL_LEVEL
CREATE TABLE EDUCATIONAL_LEVEL
(
id INT IDENTITY(1,1) PRIMARY KEY,
level VARCHAR(50) NOT NULL
);

--FAMILY STATUS
CREATE TABLE FAMILY_STATUS
(
id INT IDENTITY(1,1) PRIMARY KEY,
status VARCHAR(30) NOT NULL
);

--CITY
CREATE TABLE CITY
(
id INT IDENTITY(1,1) PRIMARY KEY,
name VARCHAR(30) NOT NULL
);

--PROFESSION
CREATE TABLE PROFESSION
(
id INT IDENTITY(1,1) PRIMARY KEY,
description VARCHAR(30) NOT NULL
);

--CUSTOMER
CREATE TABLE CUSTOMER
(
id INT IDENTITY(1,1) PRIMARY KEY,
profession_id INT NOT NULL,
city_id INT NOT NULL,
educational_level_id INT NOT NULL,
family_status_id INT NOT NULL,
firstname VARCHAR(50) NOT NULL,
lastname VARCHAR(50) NOT NULL,
address VARCHAR(80) NOT NULL,
birth_date DATE NOT NULL,
registration_date DATE NOT NULL,
customer_balance MONEY DEFAULT 0,
FOREIGN KEY (profession_id) REFERENCES ΕΠΑΓΓΕΛΜΑ(id),
FOREIGN KEY (city_id) REFERENCES ΠΟΛΗ(id),
FOREIGN KEY (educational_level_id) REFERENCES EDUCATIONAL_LEVEL(id),
FOREIGN KEY (family_status_id) REFERENCES FAMILY_STATUS(id),
CONSTRAINT CHECK_BIRTDATE CHECK (birth_date<SYSDATETIME()),
CONSTRAINT CHECK_REGISTRATION_DATE CHECK (registration_date<=SYSDATETIME()),
CONSTRAINT CHECK_REGISTRATION_DATE2 CHECK (registration_date>birth_date)
);

--ANNUAL_QUARTERS
CREATE TABLE ANNUAL_QUARTERS
(
id INT IDENTITY(1,1) PRIMARY KEY,
mass_registration_date DATE NOT NULL
);

--PERSONAL_MEDICAL_DATA
CREATE TABLE PERSONAL_MEDICAL_DATA
(
id INT IDENTITY(1,1) PRIMARY KEY,
customer_id INT NOT NULL,
annual_quarters_id INT NOT NULL,
fat_mass_percentage DECIMAL(8, 2) NOT NULL,
body_mass_index DECIMAL(8, 2) NOT NULL,
cardiorespiratory_function INT NOT NULL,
musculoskeletal_function INT NOT NULL,
flexibility_level INT NOT NULL,
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(id),
FOREIGN KEY (annual_quarters_id) REFERENCES THREE_MONTHS(id),
CONSTRAINT cardiorespiratory_function_RANGE_ONE_TO_FIVE CHECK (cardiorespiratory_function>=1 AND cardiorespiratory_function<=5),
CONSTRAINT musculoskeletal_function_RANGE_ONE_TO_FIVE CHECK (musculoskeletal_function>=1 AND musculoskeletal_function<=5),
CONSTRAINT flexibility_level_RANGE_ONE_TO_FIVE CHECK (flexibility_level>=1 AND flexibility_level<=5),
);

--TRAINING_SLOT
CREATE TABLE TRAINING_SLOT
(
id INT IDENTITY(1,1) PRIMARY KEY,
date_time DATETIME NOT NULL,
maximum_number_of_customers INT NOT NULL CHECK (maximum_number_of_customers>0 AND maximum_number_of_customers<=10),
cost_per_customer MONEY NOT NULL CHECK (cost_per_customer>0),
);

--TRAINING_SLOT_CUSTOMER
CREATE TABLE TRAINING_SLOT_CUSTOMER
(
id INT IDENTITY(1,1) PRIMARY KEY,
training_slot_id INT NOT NULL,
customer_id INT NOT NULL,
cancellation BIT DEFAULT 0,
presence BIT DEFAULT 0,
cancellation_reason VARCHAR(150),
payment_amount MONEY DEFAULT 0,
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(id),
FOREIGN KEY (training_slot_id) REFERENCES TRAINING_SLOT(id),
);

--HEALTH_PROBLEM_TYPE
CREATE TABLE HEALTH_PROBLEM_TYPE
(
id INT IDENTITY(1,1) PRIMARY KEY,
type VARCHAR(80) NOT NULL
);

--HEALTH_PROBLEM
CREATE TABLE HEALTH_PROBLEM
(
id INT IDENTITY(1,1) PRIMARY KEY,
customer_id INT NOT NULL,
health_problem_type_id INT NOT NULL,
description VARCHAR(150) NOT NULL
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(id),
FOREIGN KEY (health_problem_type_id) REFERENCES HEALTH_PROBLEM_TYPE(id),
);

--PROGRAM_TYPE
CREATE TABLE PROGRAM_TYPE
(
id INT IDENTITY(1,1) PRIMARY KEY,
type VARCHAR(80) NOT NULL
);

--PERSONALIZED_PROGRAM
CREATE TABLE PERSONALIZED_PROGRAM
(
id INT IDENTITY(1,1) PRIMARY KEY,
customer_id INT NOT NULL,
program_type_id INT NOT NULL,
start_date DATE NOT NULL,
end_date DATE NOT NULL,
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(id),
FOREIGN KEY (program_type_id) REFERENCES PROGRAM_TYPE(id),
CONSTRAINT CHECK_END_DATE_PROGRAMM CHECK (start_date<end_date),
);

--EXERCISE
CREATE TABLE EXERCISE
(
id INT IDENTITY(1,1) PRIMARY KEY,
description VARCHAR(80) NOT NULL
);

--PERSONALIZED_PROGRAM_EXERCISE
CREATE TABLE PERSONALIZED_PROGRAM_EXERCISE
(
id INT IDENTITY(1,1) PRIMARY KEY,
personalised_program_id INT NOT NULL,
exercise_id INT NOT NULL,
FOREIGN KEY (personalised_program_id) REFERENCES PERSONALIZED_PROGRAM(id),
FOREIGN KEY (exercise_id) REFERENCES EXERCISE(id)
);

--INSTRUCTION
CREATE TABLE INSTRUCTION
(
id INT IDENTITY(1,1) PRIMARY KEY,
personalised_program_exercise_id INT NOT NULL,
description VARCHAR(200) NOT NULL
FOREIGN KEY (personalised_program_exercise_id) REFERENCES PERSONALIZED_PROGRAM_EXERCISE(id)
);



